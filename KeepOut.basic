1 hgr
2 HCOLOR = 3
3 PI = 3.141592653
4 xscreen = 280
5 yscreen = 192

30 dim triangles(12*20)
40 ntriangles = 0
50 dim rectangles(16*20)
60 nrectangles = 0
61 rem to draw a triangle, add the relevant points to triangles -
62 rem x1,y1,z1,x2,y2,z2,x3,y3,z3 - and increment ntriangles
63 rem drawing a rectangle is the analagous with appropriate variables
64 rem the arrays have space for 20 at once

70 xcamera = 0
80 ycamera = 0
90 zcamera = 0
100 yrot = 0
101 rem choosing to ignore x and z rotation as they are not needed for this
102 rem rotation of 0 is in the +z direction; angles are 0-2Ï€

120 triangles(0) = 0
121 triangles(1) = 0
122 triangles(2) = 1

123 triangles(3) = 10
124 triangles(4) = 0
125 triangles(5) = 1

126 triangles(6) = 0
127 triangles(7) = 10
128 triangles(8) = 1

129 ntriangles = 1

130 rectangles(0) = 0
131 rectangles(1) = 0
132 rectangles(2) = 1

133 rectangles(3) = 10
134 rectangles(4) = 0
135 rectangles(5) = 1

136 rectangles(6) = 0
137 rectangles(7) = 0
138 rectangles(8) = 1

139 rectangles(9) = 0
140 rectangles(10) = 0
141 rectangles(11) = 1

142 nrectangles = 1

150 gosub 5900
160 end

5900 rem subprotocol to draw all existing objects in the frame
5910 rem does not compute occlusion
5920 gosub 5990
5930 gosub 6590
5940 return

5990 if ntriangles == 0 then return
6000 for objecti=0 to ntriangles-1 step 1
6010 x1 = triangles(9 * objecti + 0)
6020 y1 = triangles(9 * objecti + 1)
6030 z1 = triangles(9 * objecti + 2)
6040 x2 = triangles(9 * objecti + 3)
6050 y2 = triangles(9 * objecti + 4)
6060 z2 = triangles(9 * objecti + 5)
6070 x3 = triangles(9 * objecti + 6)
6080 y3 = triangles(9 * objecti + 7)
6090 z3 = triangles(9 * objecti + 8)

6100 dist = sqr(x1*x1 + z1*z1)
6110 angle = atn(x1/z1)
6120 if z1 < 0 then angle = angle + PI/2
6130 x1 = dist * sin(angle - yrot)
6140 z1 = dist * cos(angle - yrot)
6150 y1 = y1
6160 x1 = x1 + xcamera
6170 z1 = z1 + zcamera
6180 y1 = y1 + ycamera

6200 dist = sqr(x2*x2 + z2*z2)
6210 angle = atn(x2/z2)
6220 if z2 < 0 then angle = angle + PI/2
6230 x2 = dist * sin(angle - yrot)
6240 z2 = dist * cos(angle - yrot)
6250 y2 = y2
6260 x2 = x2 + xcamera
6270 z2 = z2 + zcamera
6280 y2 = y2 + ycamera

6300 dist = sqr(x3*x3 + z3*z3)
6310 angle = atn(x3/z3)
6320 if z3 < 0 then angle = angle + PI/2
6330 x3 = dist * sin(angle - yrot)
6340 z3 = dist * cos(angle - yrot)
6350 y3 = y3
6360 x3 = x3 + xcamera
6370 z3 = z3 + zcamera
6380 y3 = y3 + ycamera

6400 x1 = x1 / z1 + xscreen/2
6410 y1 = y1 / z1 + yscreen/2
6420 x2 = x2 / z2 + xscreen/2
6430 y2 = y2 / z2 + yscreen/2
6440 x3 = x3 / z3 + xscreen/2
6450 y3 = y3 / z3 + yscreen/2

6451 PRINT "TRIANGLE ";x1;" ";y1;" ";x2;" ";y2;" ";x3;" ";y3

6500 hplot x1, y1 to x2, y2
6510 hplot x2, y2 to x3, y3
6520 hplot x3, y3 to x1, y1

6530 next objecti
6540 return

6590 if nrectangles == 0 then return
6600 for objecti=0 to nrectangles-1 step 1
6610 x1 = rectangles(12 * objecti + 0)
6620 y1 = rectangles(12 * objecti + 1)
6630 z1 = rectangles(12 * objecti + 2)
6640 x2 = rectangles(12 * objecti + 3)
6650 y2 = rectangles(12 * objecti + 4)
6660 z2 = rectangles(12 * objecti + 5)
6670 x3 = rectangles(12 * objecti + 6)
6680 y3 = rectangles(12 * objecti + 7)
6690 z3 = rectangles(12 * objecti + 8)
6700 x4 = rectangles(12 * objecti + 9)
6710 y4 = rectangles(12 * objecti + 10)
6720 z4 = rectangles(12 * objecti + 11)

6800 dist = sqr(x1*x1 + z1*z1)
6810 angle = atn(x1/z1)
6820 if z1 < 0 then angle = angle + PI/2
6830 x1 = dist * sin(angle - yrot)
6840 z1 = dist * cos(angle - yrot)
6850 y1 = y1
6860 x1 = x1 + xcamera
6870 z1 = z1 + zcamera
6880 y1 = y1 + ycamera

6900 dist = sqr(x2*x2 + z2*z2)
6910 angle = atn(x2/z2)
6920 if z2 < 0 then angle = angle + PI/2
6930 x2 = dist * sin(angle - yrot)
6940 z2 = dist * cos(angle - yrot)
6950 y2 = y2
6960 x2 = x2 + xcamera
6970 z2 = z2 + zcamera
6980 y2 = y2 + ycamera

7000 dist = sqr(x3*x3 + z3*z3)
7010 angle = atn(x3/z3)
7020 if z3 < 0 then angle = angle + PI/2
7030 x3 = dist * sin(angle - yrot)
7040 z3 = dist * cos(angle - yrot)
7050 y3 = y3
7060 x3 = x3 + xcamera
7070 z3 = z3 + zcamera
7080 y3 = y3 + ycamera

7100 dist = sqr(x4*x4 + z4*z4)
7110 angle = atn(x4/z4)
7120 if z4 < 0 then angle = angle + PI/2
7130 x4 = dist * sin(angle - yrot)
7140 z4 = dist * cos(angle - yrot)
7150 y4 = y4
7160 x4 = x4 + xcamera
7170 z4 = z4 + zcamera
7180 y4 = y4 + ycamera

7200 x1 = x1 / z1 + xscreen/2
7210 y1 = y1 / z1 + yscreen/2
7220 x2 = x2 / z2 + xscreen/2
7230 y2 = y2 / z2 + yscreen/2
7240 x3 = x3 / z3 + xscreen/2
7250 y3 = y3 / z3 + yscreen/2
7240 x4 = x4 / z4 + xscreen/2
7250 y4 = y4 / z4 + yscreen/2

7251 PRINT "RECTANGLE ";x1;" ";y1;" ";x2;" ";y2;" ";x3;" ";y3;" ";x4;" ";y4

7300 hplot x1, y1 to x2, y2
7310 hplot x2, y2 to x3, y3
7320 hplot x3, y3 to x4, y4
7330 hplot x4, y4 to x1, y1

7340 next objecti
7350 return